# -*- coding: utf-8 -*-
"""leak_report_app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1S9lELbDuvcsZLsJ_P91yXmGgGXQLJ8-l
"""

import streamlit as st
import pandas as pd
from datetime import datetime
import os
import geocoder
import smtplib
from email.message import EmailMessage

# Municipality email addresses for sending reports
municipality_emails = {
    "City of Johannesburg": "nompi1369@icloud.com",
    "City of Cape Town": "nompi1369@icloud.com",
    "eThekwini": "nompi1369@icloud.com",
    "Buffalo City": "nompi1369@icloud.com",
    "Mangaung": "nompi1369@icloud.com",
    "Nelson Mandela Bay": "nompi1369@icloud.com",
    "Other": "nompi1369@icloud.com"
}

def send_email_to_municipality(to_email, report):
    # Mailtrap SMTP credentials
    smtp_server = "sandbox.smtp.mailtrap.io"
    smtp_port = 2525  # or 465 if you want SSL
    smtp_user = "57ce8f34059f69"       # Replace with your Mailtrap username
    smtp_password = "ca2168fedda898"   # Replace with your Mailtrap password

    sender_email = "your_email@example.com"  # Sender email shown in mail (can be anything)

    msg = EmailMessage()
    msg['Subject'] = "üö∞ New Water Leakage Report Submitted"
    msg['From'] = sender_email
    msg['To'] = to_email
    msg.set_content(f"""
A new water leakage report has been submitted:

Name: {report['Name']}
Contact: {report['Contact']}
Municipality: {report['Municipality']}
Leak Type: {report['Leak Type']}
Location: {report['Location']}
DateTime: {report['DateTime']}
""")

    try:
        with smtplib.SMTP(smtp_server, smtp_port) as smtp:
            smtp.login(smtp_user, smtp_password)
            smtp.send_message(msg)
        return True
    except Exception as e:
        print(f"Error sending email: {e}")
        return False

# Detect location using IP
g = geocoder.ip('me')
if g.ok:
    detected_loc = f"{g.city}, {g.country}" if g.city else g.country
else:
    detected_loc = ""

# Leak type options
leak_types = ["Burst Pipe", "Leakage", "Sewage Overflow", "Other"]

# Municipalities list
municipalities = [
    "City of Johannesburg",
    "City of Cape Town",
    "eThekwini",
    "Buffalo City",
    "Mangaung",
    "Nelson Mandela Bay",
    "Other"
]

# Streamlit UI
st.title("üö∞ Water Leakage Reporting App")
st.markdown("Help your community by reporting water leaks. Fill in the details below:")

# Input fields
name = st.text_input("Full Name")
contact = st.text_input("Contact Information (Phone/Email)")
municipality = st.selectbox("Select Your Municipality", municipalities)
description = st.selectbox("Type of Leak", leak_types)
location = st.text_input("Detected Location", value=detected_loc, disabled=True)
image = st.file_uploader("Upload an image of the leak (optional)", type=["jpg", "jpeg", "png"])

# Submit button logic
if st.button("Submit Report"):
    if not name or not contact or not municipality or not description:
        st.error("‚ùó Please complete all required fields.")
    else:
        report = {
            "Name": name,
            "Contact": contact,
            "Municipality": municipality,
            "Leak Type": description,
            "Location": location,
            "DateTime": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }

        # Append report to CSV file
        df = pd.DataFrame([report])
        file_exists = os.path.isfile("leak_reports.csv")
        df.to_csv("leak_reports.csv", mode="a", index=False, header=not file_exists)

        # Save uploaded image if any
        if image:
            os.makedirs("leak_images", exist_ok=True)
            image_path = os.path.join("leak_images", f"{datetime.now().strftime('%Y%m%d_%H%M%S')}_{image.name}")
            with open(image_path, "wb") as f:
                f.write(image.read())

        # Send email notification to municipality via Mailtrap SMTP
        to_email = municipality_emails.get(municipality, "general@municipality.gov.za")
        if send_email_to_municipality(to_email, report):
            st.success(f"‚úÖ Report submitted and email sent to **{municipality}**.")
        else:
            st.warning("‚ö†Ô∏è Report submitted but failed to send email notification.")

        # Display report summary
        with st.expander("üìã View Report Summary"):
            st.json(report)
