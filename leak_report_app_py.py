# -*- coding: utf-8 -*-
"""leak_report_app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1S9lELbDuvcsZLsJ_P91yXmGgGXQLJ8-l
"""

import streamlit as st
import pandas as pd
from datetime import datetime
import os
import geocoder

# Detect location using IP
g = geocoder.ip('me')
if g.ok:
    detected_loc = f"{g.city}, {g.country}" if g.city else g.country
else:
    detected_loc = ""

# Show detected location as default value, but allow editing
location = st.text_input("Location of Leak", value=detected_loc)


# Leak type options
leak_types = ["Burst Pipe", "Leakage", "Sewage Overflow", "Other"]

# Example municipalities (can be expanded)
municipalities = [
    "City of Johannesburg",
    "City of Cape Town",
    "eThekwini",
    "Buffalo City",
    "Mangaung",
    "Nelson Mandela Bay",
    "Other"
]

# App UI
st.title("üö∞ Water Leakage Reporting App")
st.markdown("Help your community by reporting water leaks. Fill in the details below:")

# Input fields
name = st.text_input("Full Name")
contact = st.text_input("Contact Information (Phone/Email)")
municipality = st.selectbox("Select Your Municipality", municipalities)
description = st.selectbox("Type of Leak", leak_types)
location = st.text_input("Detected Location", value=auto_location, disabled=True)
image = st.file_uploader("Upload an image of the leak (optional)", type=["jpg", "jpeg", "png"])

# Submit
if st.button("Submit Report"):
    if not name or not contact or not municipality or not description:
        st.error("‚ùó Please complete all required fields.")
    else:
        report = {
            "Name": name,
            "Contact": contact,
            "Municipality": municipality,
            "Leak Type": description,
            "Location": auto_location,
            "DateTime": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }

        df = pd.DataFrame([report])
        file_exists = os.path.isfile("leak_reports.csv")
        df.to_csv("leak_reports.csv", mode="a", index=False, header=not file_exists)

        # Save image
        if image:
            image_path = os.path.join("leak_images", f"{datetime.now().strftime('%Y%m%d_%H%M%S')}_{image.name}")
            os.makedirs("leak_images", exist_ok=True)
            with open(image_path, "wb") as f:
                f.write(image.read())

        # Simulate routing the report to the selected municipality (future: send email/API call)
        st.success(f"‚úÖ Report submitted and routed to **{municipality}** for review.")

        # Optionally: Display summary
        with st.expander("üìã View Report Summary"):
            st.json(report)
