# -*- coding: utf-8 -*-
"""leak_report_app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1S9lELbDuvcsZLsJ_P91yXmGgGXQLJ8-l
"""

import streamlit as st
import pandas as pd
from datetime import datetime
import os
import smtplib
from email.message import EmailMessage

# --- Email config (Mailtrap) ---
smtp_server = "sandbox.smtp.mailtrap.io"
smtp_port = 2525
smtp_user = "57ce8f34059f69"
smtp_password = "ca2168fedda898"
sender_email = "your_email@example.com"  # Replace with your sender email

# Municipality emails (all to same placeholder)
municipality_emails = {
    "City of Johannesburg": "nompi1369@icloud.com",
    "City of Cape Town": "nompi1369@icloud.com",
    "eThekwini": "nompi1369@icloud.com",
    "Buffalo City": "nompi1369@icloud.com",
    "Mangaung": "nompi1369@icloud.com",
    "Nelson Mandela Bay": "nompi1369@icloud.com",
    "Other": "nompi1369@icloud.com"
}

# Send email helpers
def send_email(to_email, subject, content):
    msg = EmailMessage()
    msg['Subject'] = subject
    msg['From'] = sender_email
    msg['To'] = to_email
    msg.set_content(content)
    try:
        with smtplib.SMTP(smtp_server, smtp_port) as smtp:
            smtp.login(smtp_user, smtp_password)
            smtp.send_message(msg)
        return True
    except Exception as e:
        print(f"Email error: {e}")
        return False

def send_email_to_municipality(to_email, report):
    subject = f"üö∞ New Water Leakage Report: {report['ReportID']}"
    content = f"""
A new water leakage report has been submitted:

Report ID: {report['ReportID']}
Name: {report['Name']}
Contact: {report['Contact']}
Municipality: {report['Municipality']}
Leak Type: {report['Leak Type']}
Location: {report['Location']}
DateTime: {report['DateTime']}
Status: {report['Status']}
"""
    return send_email(to_email, subject, content)

def send_receipt_to_user(to_email, report):
    subject = f"‚úÖ Water Leak Report Received - Reference {report['ReportID']}"
    content = f"""
Hi {report['Name']},

Thank you for reporting a water leakage.

We have received your report and forwarded it to your municipality (**{report['Municipality']}**).

üßæ Your Report Details:
- Report ID: {report['ReportID']}
- Date/Time: {report['DateTime']}
- Leak Type: {report['Leak Type']}
- Location: {report['Location']}
- Status: {report['Status']}

Thank you for helping to conserve water and maintain infrastructure.

üíß Water Reporting Team
"""
    return send_email(to_email, subject, content)

# Streamlit UI
st.set_page_config(page_title="Water Leakage Reporting - User", page_icon="üö∞")
st.title("üö∞ Water Leakage Reporting App")
st.markdown("Help your community by reporting water leaks. Fill the form below:")

# Input fields
name = st.text_input("Full Name")
contact = st.text_input("Contact Email")
municipality = st.selectbox("Select Your Municipality", list(municipality_emails.keys()))
leak_type = st.selectbox("Type of Leak", ["Burst Pipe", "Leakage", "Sewage Overflow", "Other"])
location = st.text_input("Location of the Leak (address or description)")
image = st.file_uploader("Upload an image of the leak (optional)", type=["jpg", "jpeg", "png"])

if st.button("Submit Report"):
    if not name or not contact or not location:
        st.error("‚ùó Please fill in all required fields.")
    else:
        report_id = f"LEAK-{datetime.now().strftime('%Y%m%d%H%M%S')}"
        report = {
            "ReportID": report_id,
            "Name": name,
            "Contact": contact,
            "Municipality": municipality,
            "Leak Type": leak_type,
            "Location": location,
            "DateTime": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "Status": "Pending"
        }

        # Save report to CSV
        df = pd.DataFrame([report])
        file_exists = os.path.isfile("leak_reports.csv")
        df.to_csv("leak_reports.csv", mode="a", index=False, header=not file_exists)

        # Save image if uploaded
        if image:
            os.makedirs("leak_images", exist_ok=True)
            image_path = os.path.join("leak_images", f"{report_id}_{image.name}")
            with open(image_path, "wb") as f:
                f.write(image.read())

        # Send emails
        municipality_email = municipality_emails[municipality]
        muni_email_sent = send_email_to_municipality(municipality_email, report)
        user_receipt_sent = send_receipt_to_user(contact, report)

        if muni_email_sent:
            st.success(f"‚úÖ Report submitted! Your reference number is **{report_id}**")
        else:
            st.warning("‚ö†Ô∏è Report saved but failed to send email to municipality.")

        if user_receipt_sent:
            st.success("üì® Confirmation email sent to your address.")
        else:
            st.warning("‚ö†Ô∏è Could not send confirmation email to you.")

        with st.expander("üìã View Report Summary"):
            st.json(report)

st.markdown("---")
st.subheader("üîé Track Your Report Status")
search_id = st.text_input("Enter your Report ID")

if st.button("Check Status"):
    if os.path.exists("leak_reports.csv"):
        df = pd.read_csv("leak_reports.csv")
        report = df[df["ReportID"] == search_id]
        if not report.empty:
            st.table(report[["ReportID", "Status", "Municipality", "DateTime"]])
        else:
            st.error("‚ùå No report found with that ID.")
    else:
        st.warning("üìÅ No reports found yet.")
